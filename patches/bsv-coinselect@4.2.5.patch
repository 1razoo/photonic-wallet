diff --git a/accumulative.js b/accumulative.js
index ff9dd9ca84c472c6d2732b27053587aa9982b5ac..6868a5fcb3d9082a3c5eb0ccc09033edf1097d09 100644
--- a/accumulative.js
+++ b/accumulative.js
@@ -20,7 +20,7 @@ module.exports = function accumulative (utxos, outputs, feeRate, changeScript) {
   }
 
   for (var i = 0; i < addedRequiredUtxosStatus.nonRequiredInputs.length; ++i) {
-    var utxo = utxos[i]
+    var utxo = addedRequiredUtxosStatus.nonRequiredInputs[i]
     var utxoBytes = utils.inputBytes(utxo)
     var utxoFee = feeRate * utxoBytes
     var utxoValue = utils.uintOrNaN(utxo.value)
diff --git a/utils.js b/utils.js
index 73dfb5ff7fb6ca62383f01b319f263a8f5073ba6..a2de3a40d47ae3c10d38ca12bcd4a819076328f8 100644
--- a/utils.js
+++ b/utils.js
@@ -1,10 +1,25 @@
 // baseline estimates, used to improve performance
-var TX_EMPTY_SIZE = (4 + 1 + 1 + 4) * 2 // Added buffer of 400 just in case
-var TX_INPUT_BASE = (32 + 4 + 1 + 4) * 2 // Multiple by 2 to correctly account for bytes
-var TX_INPUT_PUBKEYHASH = (107) * 2
-var TX_OUTPUT_BASE = (8 + 1) * 2
-var TX_OUTPUT_PUBKEYHASH = (25) * 2
-var TX_DUST_THRESHOLD = 546
+// FIXME input and output script length varints are hard coded to 5 bytes
+var TX_EMPTY_SIZE = 4 + 4
+var TX_INPUT_BASE = 32 + 4 + 4
+var TX_INPUT_PUBKEYHASH = 107
+var TX_OUTPUT_BASE = 8
+var TX_OUTPUT_PUBKEYHASH = 25
+var TX_DUST_THRESHOLD = 1
+
+function varIntSize(n) {
+  if (n < 253) {
+    return 1;
+  } else if (n <= 65535) {
+    return 3;
+  } else if (n <= 4294967295) {
+    return 5;
+  } else if (n <= 18446744073709551615n) {
+    return 9;
+  } else {
+    throw new Error("Invalid VarInt");
+  }
+}
 
 /**
  * Take care to check string or Script length
@@ -12,13 +27,13 @@ var TX_DUST_THRESHOLD = 546
 function inputBytes (input) {
   var scriptLen = 0
   if (input.script && input.script.toHex) {
-    scriptLen = (input.script.toHex()).length
+    scriptLen = (input.script.toHex()).length / 2
   } else if (input.script) {
-    scriptLen = input.script.length
+    scriptLen = input.script.length / 2
   } else {
     scriptLen = TX_INPUT_PUBKEYHASH
   }
-  return TX_INPUT_BASE + scriptLen
+  return TX_INPUT_BASE + varIntSize(scriptLen) + scriptLen
 }
 
 /**
@@ -33,7 +48,7 @@ function outputBytes (output) {
   } else {
     scriptLen = TX_OUTPUT_PUBKEYHASH
   }
-  return TX_OUTPUT_BASE + scriptLen
+  return TX_OUTPUT_BASE + varIntSize(scriptLen) + scriptLen
 }
 
 function dustThreshold (output, feeRate) {
@@ -49,7 +64,7 @@ function transactionBytes (inputs, outputs) {
   if (isNaN(inSum) || isNaN(outSum)) {
     throw new Error('Input outputs isNaN')
   }
-  return TX_EMPTY_SIZE + inSum + outSum
+  return TX_EMPTY_SIZE + varIntSize(inputs.length) + inSum + varIntSize(outputs.length) + outSum
 }
 
 function uintOrNaN (v) {
@@ -119,8 +134,8 @@ function finalize (inputs, outputs, feeRate, changeScript) {
     return { fee: innerFee }
   }
 
-  // Emergency cap for fee (0.1 BSV) which is enough for 20MB * 0.5 sat/byte
-  if (fee > 10000000) {
+  // Emergency cap for fee (100 RXD) which is enough for 20MB * 0.5 sat/byte
+  if (fee > 10000000000) {
     throw new Error('Filepay Error: Too large fee')
   }
 
